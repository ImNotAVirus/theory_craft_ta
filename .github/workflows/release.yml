name: Precomp NIFs

on:
  push:
    branches:
      - main
    paths:
      # Just run on main branch if "native" path changed.
      - "native/**"
      # Also run if this file changes.
      - ".github/workflows/release.yml"
    tags:
      # Tags will always run.
      - "*"
  pull_request:
    paths:
      # In PRs we only run if this file changes.
      - ".github/workflows/release.yml"
  workflow_dispatch:

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }} | ${{ matrix.job.variant || 'default' }})
    runs-on: ${{ matrix.job.os }}

    permissions:
      contents: write
      id-token: write
      attestations: write

    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15"]
        job:
          - { target: aarch64-apple-darwin, os: macos-13, cmake-args: "-DCMAKE_OSX_ARCHITECTURES=arm64" }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-22.04, use-cross: true, cmake-args: "-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_SYSTEM_NAME=Linux" }
          - { target: aarch64-unknown-linux-musl, os: ubuntu-22.04, use-cross: true, cmake-args: "-DCMAKE_C_COMPILER=aarch64-linux-musl-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-musl-g++ -DCMAKE_SYSTEM_NAME=Linux" }
          - { target: x86_64-apple-darwin, os: macos-13, cmake-args: "-DCMAKE_OSX_ARCHITECTURES=x86_64" }
          - { target: x86_64-pc-windows-gnu, os: windows-2025, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
          - { target: x86_64-pc-windows-gnu, os: windows-2025, variant: "legacy_cpu" }
          - { target: x86_64-pc-windows-msvc, os: windows-2025, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
          - { target: x86_64-pc-windows-msvc, os: windows-2025, variant: "legacy_cpu" }
          - { target: x86_64-unknown-freebsd, os: ubuntu-22.04, use-cross: true, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma", cmake-args: "-DCMAKE_C_COMPILER=x86_64-unknown-freebsd13-gcc -DCMAKE_CXX_COMPILER=x86_64-unknown-freebsd13-g++ -DCMAKE_SYSTEM_NAME=FreeBSD" }
          - { target: x86_64-unknown-freebsd, os: ubuntu-22.04, use-cross: true, variant: "legacy_cpu", cmake-args: "-DCMAKE_C_COMPILER=x86_64-unknown-freebsd13-gcc -DCMAKE_CXX_COMPILER=x86_64-unknown-freebsd13-g++ -DCMAKE_SYSTEM_NAME=FreeBSD" }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04, variant: "legacy_cpu" }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-22.04, use-cross: true }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract crate information
        shell: bash
        run: |
          # Get the project version from mix.exs
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Maybe add Rust flags for compilation
        shell: bash
        run: |
          echo "RUSTFLAGS=${{ matrix.job.rustflags }}" >> $GITHUB_ENV
        if: ${{ matrix.job.rustflags }}

      - name: Maybe add CMake flags for TA-Lib compilation
        shell: bash
        run: |
          echo "CMAKE_ARGS=${{ matrix.job.cmake-args }}" >> $GITHUB_ENV
        if: ${{ matrix.job.cmake-args }}

      - name: Add target
        shell: bash
        run: |
          rustup target add ${{ matrix.job.target }}

      - name: Install CMake (Ubuntu)
        if: startsWith(matrix.job.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Install CMake (macOS)
        if: startsWith(matrix.job.os, 'macos')
        run: |
          brew install cmake

      - name: Install CMake (Windows)
        if: startsWith(matrix.job.os, 'windows')
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-precomp
          shared-key: ${{ matrix.job.target }}-${{ matrix.nif }}
          workspaces: |
            native/theory_craft_ta

      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.1.4
        with:
          project-name: theory_craft_ta
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}
          cross-version: ${{ matrix.job.cross-version || 'from-source' }}
          project-dir: "native/theory_craft_ta"
          cargo-args: ${{ matrix.job.cargo-args }}
          variant: ${{ matrix.job.variant }}

      - name: Artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.build-crate.outputs.file-path }}

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')
